[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Аналіз автомобільного ринку України",
    "section": "",
    "text": "Про курс"
  },
  {
    "objectID": "eda.html",
    "href": "eda.html",
    "title": "1  Розвідувальний аналіз даних",
    "section": "",
    "text": "import pandas as pd\n\nОпис змінних:\n\nBrand – марка автомобіля;\nModel – модель автомобіля;\nYear – рік випуску автомобіля;\nPrice – ціна автомобіля (дол.);\nMileage – пробіг автомобіля (тис. км.);\nLocation – фізичне місце розташування автомобіля (включає в себе міста, села, поселення міського типу);\nRegion - регіон розташування автомобіля;\nFuel type – тип палива автомобіля;\nEngine volume – об‘єм двигуна автомобіля (л.);\nGearbox type – тип коробки передач автомобіля;\nWheel drive – тип приводу автомобіля;\nAccident – ДТП (потрапляв автомобіль в ДТП чи ні);\nVIN-code – VIN-code (перевірений VIN-code чи ні);\nDesc – опис оголошення.\n\n\ndf = pd.read_excel('00_data/ukr_cars.xlsx')\ndf\n\n\n\n\n\n  \n    \n      \n      Price\n      FullName\n      Brand\n      Model\n      Year\n      Mileage\n      Location\n      Region\n      FuelType\n      EngineVolume\n      GearboxType\n      WheelDrive\n      Accident\n      VIN-code\n      Desc\n    \n  \n  \n    \n      0\n      16950\n      BMW X5  2012\n      BMW\n      X5\n      2012\n      155\n      Чернівці\n      Чернівецька область\n      Бензин\n      3.0\n      Автомат\n      Повний\n      Так\n      Так\n      Авто з Америкі  .В гарному стані. Перший власн...\n    \n    \n      1\n      17500\n      BMW X5  2012\n      BMW\n      X5\n      2012\n      219\n      Черкаси\n      Черкаська область\n      Бензин\n      3.0\n      Автомат\n      Повний\n      Так\n      Так\n      2013 рік Авто у відмінному стані\\nу рідній фар...\n    \n    \n      2\n      28900\n      Audi A4  2017\n      Audi\n      A4\n      2017\n      77\n      Одеса\n      Одеська область\n      Бензин\n      2.0\n      Автомат\n      Повний\n      Так\n      Так\n      Хороша машина шукає свого нового господаря! Ві...\n    \n    \n      3\n      29900\n      BMW X5  2014\n      BMW\n      X5\n      2014\n      147\n      Рівне\n      Рівненська область\n      Дизель\n      3.0\n      Автомат\n      Повний\n      Так\n      Так\n      ТЕРМІНОВИЙ ПРОДАЖ!\\n\\nBMW X5 35D 2014р. з ориг...\n    \n    \n      4\n      39000\n      Audi Q7  2016\n      Audi\n      Q7\n      2016\n      101\n      Дніпро\n      Дніпропетровська область\n      Бензин\n      3.0\n      Автомат\n      Повний\n      Так\n      Так\n      Дуже надійне авто, хороша комплектація, 7 місц...\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      42576\n      600\n      ГАЗ 2410  1986\n      ГАЗ\n      2410\n      1986\n      46\n      Олевськ\n      Житомирська область\n      Бензин\n      2.5\n      Ручна / Механіка\n      Задній\n      Ні\n      Так\n      Продам авто на впевненому ходу, до коробки , д...\n    \n    \n      42577\n      55800\n      BMW M6  2013\n      BMW\n      M6\n      2013\n      147\n      Хуст\n      Закарпатська область\n      Бензин\n      4.4\n      Автомат\n      Задній\n      Ні\n      Так\n      Автомобіль приганявся для себе з Німеччини. Ро...\n    \n    \n      42578\n      650\n      ГАЗ 24  1976\n      ГАЗ\n      24\n      1976\n      140\n      Мукачево\n      Закарпатська область\n      Бензин\n      2.4\n      Ручна / Механіка\n      Задній\n      Ні\n      Так\n      Всі питаня по телефону\n    \n    \n      42579\n      5999\n      BMW 116  2006\n      BMW\n      116\n      2006\n      137\n      Луцьк\n      Волинська область\n      Бензин\n      1.6\n      Ручна / Механіка\n      Задній\n      Ні\n      Так\n      цікавить обмін на позашляховик\n    \n    \n      42580\n      450\n      ВАЗ 2101  1988\n      ВАЗ\n      2101\n      1988\n      320\n      Жидачів\n      Львівська область\n      Бензин\n      1.5\n      Ручна / Механіка\n      Задній\n      Ні\n      Так\n      авто в чудовому стані робити нічого непотрібно...\n    \n  \n\n42581 rows × 15 columns"
  },
  {
    "objectID": "summary.html",
    "href": "summary.html",
    "title": "2  Висновки",
    "section": "",
    "text": "In summary, this book has no content whatsoever."
  },
  {
    "objectID": "eda.html#імпорт-бібліотек",
    "href": "eda.html#імпорт-бібліотек",
    "title": "1  Розвідувальний аналіз даних",
    "section": "1.1 Імпорт бібліотек",
    "text": "1.1 Імпорт бібліотек\n\nimport pandas as pd\nimport numpy as np\nimport datetime\nimport pyarrow.parquet as pq\n\n\nimport matplotlib.pyplot as plt\nimport ptitprince as pt\nimport seaborn as sns\nimport joypy\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom scipy.interpolate import griddata\nfrom plotnine import *\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")"
  },
  {
    "objectID": "eda.html#вхідні-дані",
    "href": "eda.html#вхідні-дані",
    "title": "1  Розвідувальний аналіз даних",
    "section": "1.2 Вхідні дані",
    "text": "1.2 Вхідні дані\nУ роботі використаний набір даних, отриманий за допомогою парсингу маркетплейсу Autoria за 10 вересня 2022 року: https://auto.ria.com/uk. Даний сайт працює як віртуальний торговельний майданчик із загальнодоступними оголошеннями про продаж автомобілів разом з інформацією про їх характеристики.\nОпис змінних:\n\nprice – ціна автомобіля (дол.);\nfull_name – повна назва автомобіля (включає в себе марку та модель);\nbrand – марка автомобіля;\nmodel – модель автомобіля;\nmake_year – рік випуску автомобіля;\nmileage – пробіг автомобіля (тис. км.);\nlocation – фізичне місце розташування автомобіля (включає в себе міста, села, поселення міського типу);\nregion - регіон розташування автомобіля;\nfuel – тип палива автомобіля;\ndisp – об‘єм двигуна автомобіля (л.);\ngearbox – тип коробки передач автомобіля;\ndrive – тип приводу автомобіля;\naccident – ДТП (потрапляв автомобіль в ДТП чи ні);\nvin – VIN-code (перевірений VIN-code чи ні);\ndesc – опис оголошення.\n\n\ndf = pd.read_csv('00_data/cars.csv')\ndf.head()\n\n\n\n\nВхідні дані\n  \n    \n      \n      price\n      full_name\n      brand\n      model\n      make_year\n      mileage\n      location\n      region\n      fuel\n      disp\n      gearbox\n      drive\n      accident\n      vin\n      desc\n      age\n      price_log\n    \n  \n  \n    \n      0\n      16950\n      BMW X5  2012\n      BMW\n      X5\n      2012\n      155\n      ЧЕРНІВЦІ\n      ЧЕРНІВЕЦЬКА\n      БЕНЗИН\n      3.0\n      АКПП\n      ПОВНИЙ\n      ТАК\n      ТАК\n      АВТО З АМЕРИКІ  .В ГАРНОМУ СТАНІ. ПЕРШИЙ ВЛАСН...\n      10\n      9.738023\n    \n    \n      1\n      17500\n      BMW X5  2012\n      BMW\n      X5\n      2012\n      219\n      ЧЕРКАСИ\n      ЧЕРКАСЬКА\n      БЕНЗИН\n      3.0\n      АКПП\n      ПОВНИЙ\n      ТАК\n      ТАК\n      2013 РІК АВТО У ВІДМІННОМУ СТАНІ\\nУ РІДНІЙ ФАР...\n      10\n      9.769956\n    \n    \n      2\n      28900\n      AUDI A4  2017\n      AUDI\n      A4\n      2017\n      77\n      ОДЕСА\n      ОДЕСЬКА\n      БЕНЗИН\n      2.0\n      АКПП\n      ПОВНИЙ\n      ТАК\n      ТАК\n      ХОРОША МАШИНА ШУКАЄ СВОГО НОВОГО ГОСПОДАРЯ! ВІ...\n      5\n      10.271597\n    \n    \n      3\n      29900\n      BMW X5  2014\n      BMW\n      X5\n      2014\n      147\n      РІВНЕ\n      РІВНЕНСЬКА\n      ДИЗЕЛЬ\n      3.0\n      АКПП\n      ПОВНИЙ\n      ТАК\n      ТАК\n      ТЕРМІНОВИЙ ПРОДАЖ!\\n\\nBMW X5 35D 2014Р. З ОРИГ...\n      8\n      10.305614\n    \n    \n      4\n      39000\n      AUDI Q7  2016\n      AUDI\n      Q7\n      2016\n      101\n      ДНІПРО\n      ДНІПРОПЕТРОВСЬКА\n      БЕНЗИН\n      3.0\n      АКПП\n      ПОВНИЙ\n      ТАК\n      ТАК\n      ДУЖЕ НАДІЙНЕ АВТО, ХОРОША КОМПЛЕКТАЦІЯ, 7 МІСЦ...\n      6\n      10.571317\n    \n  \n\n\n\n\n\ndf.info()\n\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 42581 entries, 0 to 42580\nData columns (total 17 columns):\n #   Column     Non-Null Count  Dtype  \n---  ------     --------------  -----  \n 0   price      42581 non-null  int64  \n 1   full_name  42581 non-null  object \n 2   brand      42581 non-null  object \n 3   model      42581 non-null  object \n 4   make_year  42581 non-null  int64  \n 5   mileage    42581 non-null  int64  \n 6   location   42581 non-null  object \n 7   region     42581 non-null  object \n 8   fuel       42581 non-null  object \n 9   disp       42581 non-null  float64\n 10  gearbox    42581 non-null  object \n 11  drive      42581 non-null  object \n 12  accident   42581 non-null  object \n 13  vin        42581 non-null  object \n 14  desc       42581 non-null  object \n 15  age        42581 non-null  int64  \n 16  price_log  42581 non-null  float64\ndtypes: float64(2), int64(4), object(11)\nmemory usage: 5.5+ MB\n\n\n\ndf.describe()\n\n\n\n\n\n  \n    \n      \n      price\n      make_year\n      mileage\n      disp\n      age\n      price_log\n    \n  \n  \n    \n      count\n      4.258100e+04\n      42581.000000\n      42581.000000\n      42581.000000\n      42581.000000\n      42581.000000\n    \n    \n      mean\n      1.712289e+04\n      2010.433034\n      174.029826\n      2.295422\n      11.566966\n      9.349121\n    \n    \n      std\n      2.207514e+04\n      7.471509\n      106.968546\n      0.987495\n      7.471509\n      0.885525\n    \n    \n      min\n      1.500000e+02\n      1936.000000\n      0.000000\n      0.000000\n      -1.000000\n      5.010635\n    \n    \n      25%\n      7.000000e+03\n      2007.000000\n      95.000000\n      1.800000\n      6.000000\n      8.853665\n    \n    \n      50%\n      1.160000e+04\n      2012.000000\n      171.000000\n      2.000000\n      10.000000\n      9.358760\n    \n    \n      75%\n      1.899900e+04\n      2016.000000\n      238.000000\n      2.900000\n      15.000000\n      9.852142\n    \n    \n      max\n      1.004831e+06\n      2023.000000\n      999.000000\n      7.000000\n      86.000000\n      13.820330\n    \n  \n\n\n\n\n\ndf.isna().sum()\n\nprice        0\nfull_name    0\nbrand        0\nmodel        0\nmake_year    0\nmileage      0\nlocation     0\nregion       0\nfuel         0\ndisp         0\ngearbox      0\ndrive        0\naccident     0\nvin          0\ndesc         0\nage          0\nprice_log    0\ndtype: int64\n\n\n\ndf.fuel.value_counts()\n\nБЕНЗИН        19364\nДИЗЕЛЬ        13278\nГАЗ            8157\nЕЛЕКТРО         885\nГІБРИД          821\nНЕ ВКАЗАНО       76\nName: fuel, dtype: int64\n\n\n\ndf[\"brand\"].nunique()\n\n118\n\n\n\ndf['brand'].value_counts().head()\n\nVOLKSWAGEN       4371\nBMW              4333\nMERCEDES-BENZ    3863\nAUDI             2685\nTOYOTA           2463\nName: brand, dtype: int64\n\n\n\ndf_counts = df[\"brand\"].value_counts().iloc[:25].reset_index()\ndf_counts.columns = [\"brand\", \"count\"]\n\nfig = px.bar(df_counts, y=\"brand\", x=\"count\", orientation=\"h\")\nfig.update_layout(yaxis={'categoryorder':'total ascending'})\n\nfig.update_layout(xaxis_title=\"Кількість\", yaxis_title=\"\", plot_bgcolor='rgba(0,0,0,0)')\nfig.show()\n\ndf_counts = df[\"brand\"].value_counts().iloc[:-50:-1].reset_index()\ndf_counts.columns = [\"brand\", \"count\"]\n\nfig = px.bar(df_counts, y=\"brand\", x=\"count\", orientation=\"h\")\nfig.update_layout(yaxis={'categoryorder':'total descending'})\n\nfig.update_layout(xaxis_title=\"Кількість\", yaxis_title=\"\", plot_bgcolor='rgba(0,0,0,0)')\nfig.show()\n\n\n\n\n                                                \n\n\n\n                                                \n\n\n\n\n\ndef get_top_models(df, brand, top_n=5):\n    # Відфільтровуємо за брендом\n    df_brand = df[df[\"brand\"] == brand]\n    \n    # Згрупуємо за моделлю та порахуємо кількість\n    model_counts = df_brand.groupby(by=[\"model\"]).size().reset_index(name=\"count\")\n\n    # Відсортуємо та обмежимо результат до top_n найпопулярніших моделей\n    top_models = model_counts.nlargest(top_n, \"count\")\n    \n    return top_models\n\n\ntop5_vw_models = get_top_models(df, \"VOLKSWAGEN\")\ntop5_bmw_models = get_top_models(df, \"BMW\")\ntop5_mers_models = get_top_models(df, \"MERCEDES-BENZ\")\n\n\nvolk = sns.catplot(y='model', x='count', data=top5_vw_models, kind='bar',\npalette='PRGn', alpha=0.5, legend=False)\nvolk.set(xlabel='Кількість', ylabel='Модель автомобіля', title='Volkswagen')\nvolk.fig.suptitle(\"\")\n\nbmw = sns.catplot(y='model', x='count', data=top5_bmw_models, kind='bar',\npalette='Spectral', alpha=0.5, legend=False)\nbmw.set(xlabel='Кількість', ylabel='Модель автомобіля', title='BMW')\nbmw.fig.suptitle(\"\")\n\nmb = sns.catplot(y='model', x='count', data=top5_mers_models, kind='bar',\npalette='BrBG', alpha=0.5, legend=False)\nmb.set(xlabel='Кількість', ylabel='Модель автомобіля', title='Mercedes-Benz')\nmb.fig.suptitle(\"\")\nplt.show()\n\n\n\n\n\n\nVolkswagen\n\n\n\n\n\n\n\nBMW\n\n\n\n\n\n\n\nMercedes-Benz\n\n\n\n\n\n\n\nuaRegionsGrid = pd.DataFrame({\n'row': [1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5],\n'col': [2, 5, 6, 7, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 2, 5, 6, 7, 4, 6, 5],\n'code': list(range(1, 28)),\n'name': [\"ВОЛИНСЬКА\", \"КИЇВ\", \"ЧЕРНІГІВСЬКА\", \"СУМСЬКА\", \"ЛЬВІВСЬКА\", \"ТЕРНОПІЛЬСЬКА\", \"РІВНЕНСЬКА\", \"ЖИТОМИРСЬКА\", \"КИЇВСЬКА\", \"ПОЛТАВСЬКА\", \"ХАРКІВСЬКА\", \"ЛУГАНСЬКА\", \"ЗАКАРПАТСЬКА\", \"ІВАНО-ФРАНКІВСЬКА\", \"ХМЕЛЬНИЦЬКА\", \"ВІННИЦЬКА\", \"ЧЕРКАСЬКА\", \"КІРОВОГРАДСЬКА\", \"ДНІПРОПЕТРОВСЬКА\", \"ДОНЕЦЬКА\", \"ЧЕРНІВЕЦЬКА\", \"МИКОЛАЇВСЬКА\", \"ХЕРСОНСЬКА\", \"ЗАПОРІЗЬКА\", \"ОДЕСЬКА\", \"АР КРИМ\", \"СЕВАСТОПОЛЬ\"]\n})\n\ndata_region_quantity = df.groupby('region').size().reset_index(name='count')\ndata_region_quantity['percent'] = (data_region_quantity['count'] / data_region_quantity['count'].sum()) * 100\nuaCarsQuantity = uaRegionsGrid.merge(data_region_quantity, left_on='name', right_on='region', how='left')\n\n\ndata = np.asarray(uaCarsQuantity.pivot(\"row\", \"col\", \"percent\"))\ntext = np.asarray(uaCarsQuantity.pivot(\"row\", \"col\", \"region\"))\nlabels = (np.asarray([\"{0}\\n{1:.2f}\".format(text,data) for text, data in zip(text.flatten(), data.flatten())])).reshape(5,8)\n\nsns.set_theme(style='white', font_scale=0.6)\nf, ax = plt.subplots(figsize=(9, 6))\nsns.heatmap(data,\n    annot=labels,\n    linewidths=.5,\n    fmt='',\n    ax=ax,\n    yticklabels=False,\n    xticklabels=False,\n    cbar=False)\nplt.show()\n\n\n\n\nВідсоток представлених автомобілів в регіонах України\n\n\n\n\n\nf, ax = plt.subplots(figsize=(8, 6))\nax=pt.RainCloud(x = df.gearbox, y = df.price_log, data = df, bw =  0.2, width_viol = 0.9,\n                ax = ax, orient = \"h\" , linewidth=0.1,\n                cut = 0,   \n                alpha = .65, dodge = True,\n                pointplot = True, move = .2)\nax.set_ylabel('')\n\nText(0, 0.5, '')\n\n\n\n\n\n\nf, ax = plt.subplots(figsize=(8, 6))\nax=pt.RainCloud(x = df.gearbox, y = np.log1p(df.mileage),\n                bw = 0.2, width_viol = 0.9,\n                ax = ax, orient = \"h\" , linewidth=0.1,\n                alpha = .65, dodge = True,\n                pointplot = True, move = .2)\nax.set_ylabel('')\nplt.show()\n\n\n\n\n\nlabels=[y if y%5==0 else None for y in list(df.age.unique())]\nfig, axes = joypy.joyplot(df, by=\"age\", column=\"price_log\",\n                            labels=labels, range_style='own', \n                            grid=\"y\", linewidth=1, legend=False, fade=True,\n                            title=\"Вартість автомобілів по рокам\\n(log(Price))\",                            \n                            kind=\"counts\", bins=50)\n\nlabels=[y if y%5==0 else None for y in list(df.age.unique())]\nfig, axes = joypy.joyplot(df, by=\"age\", column='mileage',\n                            labels=labels, range_style='own', \n                            grid=\"y\", linewidth=1, legend=False, fade=True,\n                            title=\"Пробіг автомобілів по рокам\\n(log(Price))\",                            \n                            kind=\"counts\")\n\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\n\nsns.scatterplot(x=\"make_year\", y=\"price_log\",\n                hue=\"gearbox\", data=df,\n                size='mileage', alpha=0.5)\nplt.show()\n\n\n\n\n\nsns.histplot(data=df, x=\"price_log\", hue=\"accident\",\n                palette=\"mako\", kde=True, alpha=0.5)\nplt.show()\n\n\n\n\n\nx = np.array(df.make_year)\ny = np.array(df.mileage)\nz = np.array(np.log(df.price))\n\n\nxi = np.linspace(x.min(), x.max(), 100)\nyi = np.linspace(y.min(), y.max(), 100)\n\nX,Y = np.meshgrid(xi,yi)\n\nZ = griddata((x,y),z,(X,Y), method='cubic')\n\nfig = go.Figure(go.Surface(x=xi,y=yi,z=Z))\nfig.update_layout(scene=dict(\n                    xaxis_title='Рік виробництва',\n                    yaxis_title='Пробіг',\n                    zaxis_title='Ціна',\n    ))\nfig.show()\n\n\n                                                \n\n\n\ncorr_matrix = df.corr()\n\nmask = np.zeros_like(corr_matrix, dtype=np.bool)\nmask[np.triu_indices_from(mask)]= True\n\nf, ax = plt.subplots(figsize=(8, 6))\n\nheatmap = sns.heatmap(corr_matrix,\n                      mask = mask,\n                      square = True,\n                      linewidths = .5,\n                      cmap = 'coolwarm',\n                      cbar_kws = {'shrink': .4,\n                                  'ticks' : [-1, -.5, 0, 0.5, 1]},\n                      vmin = -1,\n                      vmax = 1,\n                      annot = True,\n                      annot_kws = {'size': 12})\n\nax.set_yticklabels(corr_matrix.columns, rotation = 0)\nax.set_xticklabels(corr_matrix.columns)\n\nsns.set_style({'xtick.bottom': True}, {'ytick.left': True})"
  },
  {
    "objectID": "eda.html#дані-з-data.gov.ua",
    "href": "eda.html#дані-з-data.gov.ua",
    "title": "1  Розвідувальний аналіз даних",
    "section": "1.3 Дані з data.gov.ua",
    "text": "1.3 Дані з data.gov.ua\n\ndf_gov = pd.read_csv('00_data/cars_region_brand.csv')\ndf_gov.head()\n\n\n\n\nВхідні дані\n  \n    \n      \n      brand\n      model\n      make_year\n      kind\n      body\n      purpose\n      fuel\n      capacity\n      own_weight\n      total_weight\n    \n  \n  \n    \n      0\n      SSANG YONG\n      REXTON\n      2007\n      ЛЕГКОВИЙ\n      УНІВЕРСАЛ-B\n      ЗАГАЛЬНИЙ\n      ДИЗЕЛЬ\n      2696.0\n      2069.0\n      2550.0\n    \n    \n      1\n      TOYOTA\n      PREVIA\n      2007\n      ЛЕГКОВИЙ\n      УНІВЕРСАЛ-B\n      ЗАГАЛЬНИЙ\n      БЕНЗИН\n      2362.0\n      1720.0\n      2450.0\n    \n    \n      2\n      SKODA\n      OCTAVIA\n      2011\n      ЛЕГКОВИЙ\n      ХЕТЧБЕК-В\n      ЗАГАЛЬНИЙ\n      БЕНЗИН\n      1595.0\n      1245.0\n      1720.0\n    \n    \n      3\n      CITROEN\n      JUMPY\n      2008\n      ЛЕГКОВИЙ\n      ПАСАЖИРСЬКИЙ-B\n      ЗАГАЛЬНИЙ\n      ДИЗЕЛЬ\n      1560.0\n      1736.0\n      2661.0\n    \n    \n      4\n      MERCEDES-BENZ\n      SPRINTER 313 CDI\n      2005\n      ЛЕГКОВИЙ\n      ПАСАЖИРСЬКИЙ-B\n      ЗАГАЛЬНИЙ\n      ДИЗЕЛЬ\n      2148.0\n      1995.0\n      3500.0\n    \n  \n\n\n\n\n\ndef reduce_mem_usage(df):\n    start_mem = df.memory_usage().sum() / 1024**2\n    print('Memory usage of dataframe is {:.2f} MB'.format(start_mem))\n    for col in df.columns:\n        col_type = df[col].dtype\n        \n        if col_type != object:\n            c_min = df[col].min()\n            c_max = df[col].max()\n            if str(col_type)[:3] == 'int':\n                if c_min > np.iinfo(np.int8).min and c_max < np.iinfo(np.int8).max:\n                    df[col] = df[col].astype(np.int8)\n                elif c_min > np.iinfo(np.int16).min and c_max < np.iinfo(np.int16).max:\n                    df[col] = df[col].astype(np.int16)\n                elif c_min > np.iinfo(np.int32).min and c_max < np.iinfo(np.int32).max:\n                    df[col] = df[col].astype(np.int32)\n                elif c_min > np.iinfo(np.int64).min and c_max < np.iinfo(np.int64).max:\n                    df[col] = df[col].astype(np.int64)  \n            else:\n                if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:\n                    df[col] = df[col].astype(np.float16)\n                elif c_min > np.finfo(np.float32).min and c_max < np.finfo(np.float32).max:\n                    df[col] = df[col].astype(np.float32)\n                else:\n                    df[col] = df[col].astype(np.float64)\n        else:\n            df[col] = df[col].astype('category')\n\n    end_mem = df.memory_usage().sum() / 1024**2\n    print('Memory usage after optimization is: {:.2f} MB'.format(end_mem))\n    print('Decreased by {:.1f}%'.format(100 * (start_mem - end_mem) / start_mem))\n    \n    return df\n\n\ndf = reduce_mem_usage(df)\ndf_gov = reduce_mem_usage(df_gov)\n\nMemory usage of dataframe is 5.52 MB\n\n\nMemory usage after optimization is: 3.53 MB\nDecreased by 36.1%\nMemory usage of dataframe is 1186.97 MB\n\n\nMemory usage after optimization is: 314.34 MB\nDecreased by 73.5%\n\n\n\ndf_merge = pd.merge(df, df_gov,  how='left', on=['brand', 'model', 'make_year', 'fuel'])\ndf_merge\n\n\n\n\nВхідні дані\n  \n    \n      \n      price\n      full_name\n      brand\n      model\n      make_year\n      mileage\n      location\n      region\n      fuel\n      disp\n      ...\n      vin\n      desc\n      age\n      price_log\n      kind\n      body\n      purpose\n      capacity\n      own_weight\n      total_weight\n    \n  \n  \n    \n      0\n      16950\n      BMW X5  2012\n      BMW\n      X5\n      2012\n      155\n      ЧЕРНІВЦІ\n      ЧЕРНІВЕЦЬКА\n      БЕНЗИН\n      3.0\n      ...\n      ТАК\n      АВТО З АМЕРИКІ  .В ГАРНОМУ СТАНІ. ПЕРШИЙ ВЛАСН...\n      10\n      9.734375\n      ЛЕГКОВИЙ\n      УНІВЕРСАЛ-B\n      ЗАГАЛЬНИЙ\n      2979.0\n      2150.0\n      2755.0\n    \n    \n      1\n      16950\n      BMW X5  2012\n      BMW\n      X5\n      2012\n      155\n      ЧЕРНІВЦІ\n      ЧЕРНІВЕЦЬКА\n      БЕНЗИН\n      3.0\n      ...\n      ТАК\n      АВТО З АМЕРИКІ  .В ГАРНОМУ СТАНІ. ПЕРШИЙ ВЛАСН...\n      10\n      9.734375\n      ЛЕГКОВИЙ\n      УНІВЕРСАЛ-B\n      ЗАГАЛЬНИЙ\n      2979.0\n      2145.0\n      2600.0\n    \n    \n      2\n      16950\n      BMW X5  2012\n      BMW\n      X5\n      2012\n      155\n      ЧЕРНІВЦІ\n      ЧЕРНІВЕЦЬКА\n      БЕНЗИН\n      3.0\n      ...\n      ТАК\n      АВТО З АМЕРИКІ  .В ГАРНОМУ СТАНІ. ПЕРШИЙ ВЛАСН...\n      10\n      9.734375\n      ЛЕГКОВИЙ\n      СЕДАН-B\n      ЗАГАЛЬНИЙ\n      2979.0\n      2145.0\n      2750.0\n    \n    \n      3\n      16950\n      BMW X5  2012\n      BMW\n      X5\n      2012\n      155\n      ЧЕРНІВЦІ\n      ЧЕРНІВЕЦЬКА\n      БЕНЗИН\n      3.0\n      ...\n      ТАК\n      АВТО З АМЕРИКІ  .В ГАРНОМУ СТАНІ. ПЕРШИЙ ВЛАСН...\n      10\n      9.734375\n      ЛЕГКОВИЙ\n      УНІВЕРСАЛ-B\n      ЗАГАЛЬНИЙ\n      2979.0\n      2145.0\n      2680.0\n    \n    \n      4\n      16950\n      BMW X5  2012\n      BMW\n      X5\n      2012\n      155\n      ЧЕРНІВЦІ\n      ЧЕРНІВЕЦЬКА\n      БЕНЗИН\n      3.0\n      ...\n      ТАК\n      АВТО З АМЕРИКІ  .В ГАРНОМУ СТАНІ. ПЕРШИЙ ВЛАСН...\n      10\n      9.734375\n      ЛЕГКОВИЙ\n      УНІВЕРСАЛ-B\n      ЗАГАЛЬНИЙ\n      4395.0\n      2380.0\n      2850.0\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      40708793\n      450\n      ВАЗ 2101  1988\n      ВАЗ\n      2101\n      1988\n      320\n      ЖИДАЧІВ\n      ЛЬВІВСЬКА\n      БЕНЗИН\n      1.5\n      ...\n      ТАК\n      АВТО В ЧУДОВОМУ СТАНІ РОБИТИ НІЧОГО НЕПОТРІБНО...\n      34\n      6.109375\n      ЛЕГКОВИЙ\n      СЕДАН-B\n      ЗАГАЛЬНИЙ\n      1198.0\n      955\n      1355\n    \n    \n      40708794\n      450\n      ВАЗ 2101  1988\n      ВАЗ\n      2101\n      1988\n      320\n      ЖИДАЧІВ\n      ЛЬВІВСЬКА\n      БЕНЗИН\n      1.5\n      ...\n      ТАК\n      АВТО В ЧУДОВОМУ СТАНІ РОБИТИ НІЧОГО НЕПОТРІБНО...\n      34\n      6.109375\n      ЛЕГКОВИЙ\n      СЕДАН-B\n      ЗАГАЛЬНИЙ\n      1198.0\n      950\n      1355.0\n    \n    \n      40708795\n      450\n      ВАЗ 2101  1988\n      ВАЗ\n      2101\n      1988\n      320\n      ЖИДАЧІВ\n      ЛЬВІВСЬКА\n      БЕНЗИН\n      1.5\n      ...\n      ТАК\n      АВТО В ЧУДОВОМУ СТАНІ РОБИТИ НІЧОГО НЕПОТРІБНО...\n      34\n      6.109375\n      ЛЕГКОВИЙ\n      СЕДАН\n      ЗАГАЛЬНИЙ\n      1198.0\n      955\n      1347\n    \n    \n      40708796\n      450\n      ВАЗ 2101  1988\n      ВАЗ\n      2101\n      1988\n      320\n      ЖИДАЧІВ\n      ЛЬВІВСЬКА\n      БЕНЗИН\n      1.5\n      ...\n      ТАК\n      АВТО В ЧУДОВОМУ СТАНІ РОБИТИ НІЧОГО НЕПОТРІБНО...\n      34\n      6.109375\n      ЛЕГКОВИЙ\n      СЕДАН\n      ЗАГАЛЬНИЙ\n      1198.0\n      980.0\n      1350.0\n    \n    \n      40708797\n      450\n      ВАЗ 2101  1988\n      ВАЗ\n      2101\n      1988\n      320\n      ЖИДАЧІВ\n      ЛЬВІВСЬКА\n      БЕНЗИН\n      1.5\n      ...\n      ТАК\n      АВТО В ЧУДОВОМУ СТАНІ РОБИТИ НІЧОГО НЕПОТРІБНО...\n      34\n      6.109375\n      ЛЕГКОВИЙ\n      СЕДАН\n      ЗАГАЛЬНИЙ\n      1198.0\n      950\n      1355\n    \n  \n\n40708798 rows × 23 columns"
  }
]