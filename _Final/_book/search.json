[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Аналіз автомобільного ринку України",
    "section": "",
    "text": "Про курс"
  },
  {
    "objectID": "eda.html#імпорт-бібліотек",
    "href": "eda.html#імпорт-бібліотек",
    "title": "1  Розвідувальний аналіз даних",
    "section": "1.1 Імпорт бібліотек",
    "text": "1.1 Імпорт бібліотек\n\nimport pandas as pd\nimport numpy as np\nimport datetime\nimport pyarrow.parquet as pq\n\n\nimport matplotlib.pyplot as plt\nimport ptitprince as pt\nimport seaborn as sns\nimport joypy\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom scipy.interpolate import griddata\nfrom plotnine import *\n\nfrom sklearn.model_selection import train_test_split\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")"
  },
  {
    "objectID": "eda.html#вхідні-дані",
    "href": "eda.html#вхідні-дані",
    "title": "1  Розвідувальний аналіз даних",
    "section": "1.2 Вхідні дані",
    "text": "1.2 Вхідні дані\nУ роботі використаний набір даних, отриманий за допомогою парсингу маркетплейсу Autoria за 10 вересня 2022 року: https://auto.ria.com/uk. Даний сайт працює як віртуальний торговельний майданчик із загальнодоступними оголошеннями про продаж автомобілів разом з інформацією про їх характеристики.\nОпис змінних:\n\nprice – ціна автомобіля (дол.);\nfull_name – повна назва автомобіля (включає в себе марку та модель);\nbrand – марка автомобіля;\nmodel – модель автомобіля;\nmake_year – рік випуску автомобіля;\nmileage – пробіг автомобіля (тис. км.);\nlocation – фізичне місце розташування автомобіля (включає в себе міста, села, поселення міського типу);\nregion - регіон розташування автомобіля;\nfuel – тип палива автомобіля;\ndisp – об‘єм двигуна автомобіля (л.);\ngearbox – тип коробки передач автомобіля;\ndrive – тип приводу автомобіля;\naccident – ДТП (потрапляв автомобіль в ДТП чи ні);\nvin – VIN-code (перевірений VIN-code чи ні);\ndesc – опис оголошення.\n\n\ndf = pd.read_csv('00_data/cars.csv')\ndf.head()\n\n\n\n\nВхідні дані\n  \n    \n      \n      price\n      full_name\n      brand\n      model\n      make_year\n      mileage\n      location\n      region\n      fuel\n      disp\n      gearbox\n      drive\n      accident\n      vin\n      desc\n      age\n      price_log\n    \n  \n  \n    \n      0\n      16950\n      BMW X5  2012\n      BMW\n      X5\n      2012\n      155\n      ЧЕРНІВЦІ\n      ЧЕРНІВЕЦЬКА\n      БЕНЗИН\n      3.0\n      АКПП\n      ПОВНИЙ\n      ТАК\n      ТАК\n      АВТО З АМЕРИКІ  .В ГАРНОМУ СТАНІ. ПЕРШИЙ ВЛАСН...\n      10\n      9.738023\n    \n    \n      1\n      17500\n      BMW X5  2012\n      BMW\n      X5\n      2012\n      219\n      ЧЕРКАСИ\n      ЧЕРКАСЬКА\n      БЕНЗИН\n      3.0\n      АКПП\n      ПОВНИЙ\n      ТАК\n      ТАК\n      2013 РІК АВТО У ВІДМІННОМУ СТАНІ\\nУ РІДНІЙ ФАР...\n      10\n      9.769956\n    \n    \n      2\n      28900\n      AUDI A4  2017\n      AUDI\n      A4\n      2017\n      77\n      ОДЕСА\n      ОДЕСЬКА\n      БЕНЗИН\n      2.0\n      АКПП\n      ПОВНИЙ\n      ТАК\n      ТАК\n      ХОРОША МАШИНА ШУКАЄ СВОГО НОВОГО ГОСПОДАРЯ! ВІ...\n      5\n      10.271597\n    \n    \n      3\n      29900\n      BMW X5  2014\n      BMW\n      X5\n      2014\n      147\n      РІВНЕ\n      РІВНЕНСЬКА\n      ДИЗЕЛЬ\n      3.0\n      АКПП\n      ПОВНИЙ\n      ТАК\n      ТАК\n      ТЕРМІНОВИЙ ПРОДАЖ!\\n\\nBMW X5 35D 2014Р. З ОРИГ...\n      8\n      10.305614\n    \n    \n      4\n      39000\n      AUDI Q7  2016\n      AUDI\n      Q7\n      2016\n      101\n      ДНІПРО\n      ДНІПРОПЕТРОВСЬКА\n      БЕНЗИН\n      3.0\n      АКПП\n      ПОВНИЙ\n      ТАК\n      ТАК\n      ДУЖЕ НАДІЙНЕ АВТО, ХОРОША КОМПЛЕКТАЦІЯ, 7 МІСЦ...\n      6\n      10.571317"
  },
  {
    "objectID": "eda.html#первинний-аналіз-даних",
    "href": "eda.html#первинний-аналіз-даних",
    "title": "1  Розвідувальний аналіз даних",
    "section": "1.3 Первинний аналіз даних",
    "text": "1.3 Первинний аналіз даних\nЗагальна інформація про датасет\n\ndf.info()\n\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 42581 entries, 0 to 42580\nData columns (total 17 columns):\n #   Column     Non-Null Count  Dtype  \n---  ------     --------------  -----  \n 0   price      42581 non-null  int64  \n 1   full_name  42581 non-null  object \n 2   brand      42581 non-null  object \n 3   model      42581 non-null  object \n 4   make_year  42581 non-null  int64  \n 5   mileage    42581 non-null  int64  \n 6   location   42581 non-null  object \n 7   region     42581 non-null  object \n 8   fuel       42581 non-null  object \n 9   disp       42581 non-null  float64\n 10  gearbox    42581 non-null  object \n 11  drive      42581 non-null  object \n 12  accident   42581 non-null  object \n 13  vin        42581 non-null  object \n 14  desc       42581 non-null  object \n 15  age        42581 non-null  int64  \n 16  price_log  42581 non-null  float64\ndtypes: float64(2), int64(4), object(11)\nmemory usage: 5.5+ MB\n\n\nОпис числових змінних\n\ndf.describe()\n\n\n\n\n\n  \n    \n      \n      price\n      make_year\n      mileage\n      disp\n      age\n      price_log\n    \n  \n  \n    \n      count\n      4.258100e+04\n      42581.000000\n      42581.000000\n      42581.000000\n      42581.000000\n      42581.000000\n    \n    \n      mean\n      1.712289e+04\n      2010.433034\n      174.029826\n      2.295422\n      11.566966\n      9.349121\n    \n    \n      std\n      2.207514e+04\n      7.471509\n      106.968546\n      0.987495\n      7.471509\n      0.885525\n    \n    \n      min\n      1.500000e+02\n      1936.000000\n      0.000000\n      0.000000\n      -1.000000\n      5.010635\n    \n    \n      25%\n      7.000000e+03\n      2007.000000\n      95.000000\n      1.800000\n      6.000000\n      8.853665\n    \n    \n      50%\n      1.160000e+04\n      2012.000000\n      171.000000\n      2.000000\n      10.000000\n      9.358760\n    \n    \n      75%\n      1.899900e+04\n      2016.000000\n      238.000000\n      2.900000\n      15.000000\n      9.852142\n    \n    \n      max\n      1.004831e+06\n      2023.000000\n      999.000000\n      7.000000\n      86.000000\n      13.820330\n    \n  \n\n\n\n\nКількість пропущених значень\n\ndf.isna().sum()\n\nprice        0\nfull_name    0\nbrand        0\nmodel        0\nmake_year    0\nmileage      0\nlocation     0\nregion       0\nfuel         0\ndisp         0\ngearbox      0\ndrive        0\naccident     0\nvin          0\ndesc         0\nage          0\nprice_log    0\ndtype: int64\n\n\nКількість автомобілів за типом палива\n\ndf.fuel.value_counts()\n\nБЕНЗИН        19364\nДИЗЕЛЬ        13278\nГАЗ            8157\nЕЛЕКТРО         885\nГІБРИД          821\nНЕ ВКАЗАНО       76\nName: fuel, dtype: int64\n\n\nКількість представлених брендів\n\ndf[\"brand\"].nunique()\n\n118\n\n\nНайпопулярніші бренди\n\ndf['brand'].value_counts().head()\n\nVOLKSWAGEN       4371\nBMW              4333\nMERCEDES-BENZ    3863\nAUDI             2685\nTOYOTA           2463\nName: brand, dtype: int64"
  },
  {
    "objectID": "eda.html#візуалізація-даних",
    "href": "eda.html#візуалізація-даних",
    "title": "1  Розвідувальний аналіз даних",
    "section": "1.4 Візуалізація даних",
    "text": "1.4 Візуалізація даних\n\n1.4.1 Топ популярних та непопулярних брендів\n\ndf_counts = df[\"brand\"].value_counts().iloc[:25].reset_index()\ndf_counts.columns = [\"brand\", \"count\"]\n\nfig = px.bar(df_counts, y=\"brand\", x=\"count\", orientation=\"h\")\nfig.update_layout(yaxis={'categoryorder':'total ascending'})\n\nfig.update_layout(xaxis_title=\"Кількість\", yaxis_title=\"\", plot_bgcolor='rgba(0,0,0,0)')\nfig.show()\n\ndf_counts = df[\"brand\"].value_counts().iloc[:-50:-1].reset_index()\ndf_counts.columns = [\"brand\", \"count\"]\n\nfig = px.bar(df_counts, y=\"brand\", x=\"count\", orientation=\"h\")\nfig.update_layout(yaxis={'categoryorder':'total descending'})\n\nfig.update_layout(xaxis_title=\"Кількість\", yaxis_title=\"\", plot_bgcolor='rgba(0,0,0,0)')\nfig.show()\n\n\n\n\n                                                \n\n\n\n                                                \n\n\n\n\n\n\n1.4.2 Топ-5 популярних моделей для популярних брендів\nСтворемо функцію знаходження топ-5 популярних моделей для популярних брендів.\n\ndef get_top_models(df, brand, top_n=5):\n    # Відфільтровуємо за брендом\n    df_brand = df[df[\"brand\"] == brand]\n    \n    # Згрупуємо за моделлю та порахуємо кількість\n    model_counts = df_brand.groupby(by=[\"model\"]).size().reset_index(name=\"count\")\n\n    # Відсортуємо та обмежимо результат до top_n найпопулярніших моделей\n    top_models = model_counts.nlargest(top_n, \"count\")\n    \n    return top_models\n\nФільтрація даних за брендом та знаходження топ-5 популярних моделей для популярних брендів.\n\ntop5_vw_models = get_top_models(df, \"VOLKSWAGEN\")\ntop5_bmw_models = get_top_models(df, \"BMW\")\ntop5_mers_models = get_top_models(df, \"MERCEDES-BENZ\")\n\n\nvolk = sns.catplot(y='model', x='count', data=top5_vw_models, kind='bar',\npalette='rocket', alpha=0.5, legend=False)\nvolk.set(xlabel='Кількість', ylabel='Модель автомобіля', title='Volkswagen')\nvolk.fig.suptitle(\"\")\n\nbmw = sns.catplot(y='model', x='count', data=top5_bmw_models, kind='bar',\npalette='rocket', alpha=0.5, legend=False)\nbmw.set(xlabel='Кількість', ylabel='Модель автомобіля', title='BMW')\nbmw.fig.suptitle(\"\")\n\nmb = sns.catplot(y='model', x='count', data=top5_mers_models, kind='bar',\npalette='rocket', alpha=0.5, legend=False)\nmb.set(xlabel='Кількість', ylabel='Модель автомобіля', title='Mercedes-Benz')\nmb.fig.suptitle(\"\")\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1.4.3 Heatmap регіонів України за відсоток представлених автомобілів\nСформуємо таблицю з регіонами України.\n\nuaRegionsGrid = pd.DataFrame({\n'row': [1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5],\n'col': [2, 5, 6, 7, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 2, 5, 6, 7, 4, 6, 5],\n'code': list(range(1, 28)),\n'name': [\"ВОЛИНСЬКА\", \"КИЇВ\", \"ЧЕРНІГІВСЬКА\", \"СУМСЬКА\", \"ЛЬВІВСЬКА\", \"ТЕРНОПІЛЬСЬКА\", \"РІВНЕНСЬКА\", \"ЖИТОМИРСЬКА\", \"КИЇВСЬКА\", \"ПОЛТАВСЬКА\", \"ХАРКІВСЬКА\", \"ЛУГАНСЬКА\", \"ЗАКАРПАТСЬКА\", \"ІВАНО-ФРАНКІВСЬКА\", \"ХМЕЛЬНИЦЬКА\", \"ВІННИЦЬКА\", \"ЧЕРКАСЬКА\", \"КІРОВОГРАДСЬКА\", \"ДНІПРОПЕТРОВСЬКА\", \"ДОНЕЦЬКА\", \"ЧЕРНІВЕЦЬКА\", \"МИКОЛАЇВСЬКА\", \"ХЕРСОНСЬКА\", \"ЗАПОРІЗЬКА\", \"ОДЕСЬКА\", \"АР КРИМ\", \"СЕВАСТОПОЛЬ\"]\n})\n\ndata_region_quantity = df.groupby('region').size().reset_index(name='count')\ndata_region_quantity['percent'] = (data_region_quantity['count'] / data_region_quantity['count'].sum()) * 100\nuaCarsQuantity = uaRegionsGrid.merge(data_region_quantity, left_on='name', right_on='region', how='left')\n\nВізуалізація heatmap регіонів України за відсоток представлених автомобілів.\n\ndata = np.asarray(uaCarsQuantity.pivot(\"row\", \"col\", \"percent\"))\ntext = np.asarray(uaCarsQuantity.pivot(\"row\", \"col\", \"region\"))\nlabels = (np.asarray([\"{0}\\n{1:.2f}\".format(text,data) for text, data in zip(text.flatten(), data.flatten())])).reshape(5,8)\n\nsns.set_theme(style='white', font_scale=0.6)\nf, ax = plt.subplots(figsize=(9, 6))\nsns.heatmap(data,\n    annot=labels,\n    linewidths=.5,\n    fmt='',\n    ax=ax,\n    cmap=sns.color_palette(\"BuPu\"),\n    yticklabels=False,\n    xticklabels=False,\n    cbar=False)\nplt.show()\n\n\n\n\nВідсоток представлених автомобілів в регіонах України\n\n\n\n\n\n\n1.4.4 Розподіл цін на автомобілі в залежності від типу коробки передач\n\nf, ax = plt.subplots(figsize=(8, 6))\nax=pt.RainCloud(x = df.gearbox, y = df.price_log, data = df, bw =  0.2, width_viol = 0.9,\n                ax = ax, orient = \"h\" , linewidth=0.1,\n                cut = 0,   \n                alpha = .65, dodge = True,\n                pointplot = True, move = .2)\nax.set_ylabel('')\nplt.show()\n\n\n\n\n\n\n1.4.5 Розподіл пробігу автомобіля в залежності від типу коробки передач\n\nf, ax = plt.subplots(figsize=(8, 6))\nax=pt.RainCloud(x = df.gearbox, y = np.log1p(df.mileage),\n                bw = 0.2, width_viol = 0.9,\n                ax = ax, orient = \"h\" , linewidth=0.1,\n                alpha = .65, dodge = True,\n                pointplot = True, move = .2)\nax.set_ylabel('')\nplt.show()\n\n\n\n\n\n\n1.4.6 Гребнева візуалізація розподілу цін та пробігу в залежності від віку автомобіля\n\nlabels=[y if y%5==0 else None for y in list(df.age.unique())]\nfig, axes = joypy.joyplot(df, by=\"age\", column=\"price_log\",\n                            labels=labels, range_style='own', \n                            grid=\"y\", linewidth=1, legend=False, fade=True,\n                            title=\"Вартість автомобілів по рокам\\n(log(Price))\",                            \n                            kind=\"counts\", bins=50)\n\nlabels=[y if y%5==0 else None for y in list(df.age.unique())]\nfig, axes = joypy.joyplot(df, by=\"age\", column='mileage',\n                            labels=labels, range_style='own', \n                            grid=\"y\", linewidth=1, legend=False, fade=True,\n                            title=\"Пробіг автомобілів по рокам\\n(log(Price))\",                            \n                            kind=\"counts\")\n\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\n\n\n1.4.7 Точкова діаграма цін на автомобілі в залежності року випуску, пробігу та типу коробки передач\n\nsns.scatterplot(x=\"make_year\", y=\"price_log\",\n                hue=\"gearbox\", data=df,\n                size='mileage', alpha=0.5)\nplt.show()\n\n\n\n\n\n\n1.4.8 3D візуалізація залежності ціни автомобіля від року випуску та пробігу\n\nx = np.array(df.make_year)\ny = np.array(df.mileage)\nz = np.array(np.log(df.price))\n\n\nxi = np.linspace(x.min(), x.max(), 100)\nyi = np.linspace(y.min(), y.max(), 100)\n\nX,Y = np.meshgrid(xi,yi)\n\nZ = griddata((x,y),z,(X,Y), method='cubic')\n\nfig = go.Figure(go.Surface(x=xi,y=yi,z=Z))\nfig.update_layout(scene=dict(\n                    xaxis_title='Рік виробництва',\n                    yaxis_title='Пробіг',\n                    zaxis_title='Ціна',\n    ))\nfig.show()\n\n\n                                                \n\n\n\n\n1.4.9 Кореляційна матриця\n\ncorr_matrix = df.corr()\n\nmask = np.zeros_like(corr_matrix, dtype=np.bool)\nmask[np.triu_indices_from(mask)]= True\n\nf, ax = plt.subplots(figsize=(8, 6))\n\nheatmap = sns.heatmap(corr_matrix,\n                      mask = mask,\n                      square = True,\n                      linewidths = .5,\n                      cmap = 'coolwarm',\n                      cbar_kws = {'shrink': .4,\n                                  'ticks' : [-1, -.5, 0, 0.5, 1]},\n                      vmin = -1,\n                      vmax = 1,\n                      annot = True,\n                      annot_kws = {'size': 12})\n\nax.set_yticklabels(corr_matrix.columns, rotation = 0)\nax.set_xticklabels(corr_matrix.columns)\n\nsns.set_style({'xtick.bottom': True}, {'ytick.left': True})\n\n\n\n\n\n\n1.4.10 Спліт даних на тренувальні та тестові для подальшої роботи\n\ntrain, test = train_test_split(df, test_size=0.2, random_state=2023, shuffle=True)\ntrain.to_csv('00_data_clean/train.csv', index=False)\ntest.to_csv('00_data_clean/test.csv', index=False)"
  },
  {
    "objectID": "model.html#catboost",
    "href": "model.html#catboost",
    "title": "2  Прогнозування ціни автомобіля",
    "section": "2.1 Catboost",
    "text": "2.1 Catboost\n\n2.1.1 Імпорт бібліотек\n\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nfrom catboost import CatBoostRegressor\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_absolute_error\nimport lightgbm as lgb\nfrom sklearn.preprocessing import LabelEncoder\nfrom lightgbm import LGBMRegressor, train\n\nfrom IPython.display import Markdown\n\n\n\n2.1.2 Завантаження даних\n\ntrain = pd.read_csv('00_data_clean/train.csv')\n\ntrain.sample(3)\n\n\n\n\nВхідні дані\n  \n    \n      \n      price\n      full_name\n      brand\n      model\n      make_year\n      mileage\n      location\n      region\n      fuel\n      disp\n      gearbox\n      drive\n      accident\n      vin\n      desc\n      age\n      price_log\n    \n  \n  \n    \n      11215\n      23450\n      INFINITI QX30 PREMIUM AWD 2016\n      INFINITI\n      QX30 PREMIUM AWD\n      2016\n      108\n      КИЇВ\n      КИЇВ\n      БЕНЗИН\n      2.0\n      АКПП\n      ПОВНИЙ\n      ТАК\n      ТАК\n      МОЖЛИВИЙ ДОБРИЙ ТОРГ БІЛЯ АВТО.\\n\\nПРОДАЮ INFI...\n      6\n      10.062626\n    \n    \n      2855\n      7800\n      MERCEDES-BENZ E 320  2003\n      MERCEDES-BENZ\n      E 320\n      2003\n      300\n      ЛЬВІВ\n      ЛЬВІВСЬКА\n      ДИЗЕЛЬ\n      3.2\n      АКПП\n      ЗАДНІЙ\n      НІ\n      ТАК\n      ПЕРША РЕЄСТРАЦІЯ В УКРАЇНІ \\nДВИГУН КОРОБКА В ...\n      19\n      8.961879\n    \n    \n      31479\n      11500\n      BMW 320  2013\n      BMW\n      320\n      2013\n      152\n      ОДЕСА\n      ОДЕСЬКА\n      БЕНЗИН\n      2.0\n      АКПП\n      ЗАДНІЙ\n      ТАК\n      ТАК\n      МАШИНА З АМЕРИКИ. ПОВНІСТЮ ОБСЛУГОВАНА. НОВИЙ ...\n      9\n      9.350102\n    \n  \n\n\n\n\n\ntest = pd.read_csv('00_data_clean/test.csv')\n\ntest.sample(3)\n\n\n\n\nВхідні дані\n  \n    \n      \n      price\n      full_name\n      brand\n      model\n      make_year\n      mileage\n      location\n      region\n      fuel\n      disp\n      gearbox\n      drive\n      accident\n      vin\n      desc\n      age\n      price_log\n    \n  \n  \n    \n      4415\n      19000\n      MERCEDES-BENZ E 220  7G TRONIK 2011\n      MERCEDES-BENZ\n      E 220 7G TRONIK\n      2011\n      190\n      ІРШАВА\n      ЗАКАРПАТСЬКА\n      ДИЗЕЛЬ\n      2.1\n      АКПП\n      ЗАДНІЙ\n      НІ\n      ТАК\n      АВТОМОБІЛЬ В ХОРОШОМУ СТАНІ. ПРОДАЖ НЕ СПІШНА,...\n      11\n      9.852194\n    \n    \n      5752\n      4400\n      SKODA FABIA  2007\n      SKODA\n      FABIA\n      2007\n      257\n      КРИВИЙ РІГ\n      ДНІПРОПЕТРОВСЬКА\n      ГАЗ\n      1.4\n      МКПП\n      ПЕРЕДНІЙ\n      НІ\n      ТАК\n      Я ВЛАДЕЛЕЦ, МАШИНА В ХОРОШЕМ СОСТОЯНИИ, ПО КУЗ...\n      15\n      8.389360\n    \n    \n      357\n      7529\n      VOLKSWAGEN TOUAREG  2004\n      VOLKSWAGEN\n      TOUAREG\n      2004\n      293\n      ЧЕРНІВЦІ\n      ЧЕРНІВЕЦЬКА\n      ДИЗЕЛЬ\n      2.5\n      АКПП\n      ПОВНИЙ\n      НІ\n      ТАК\n      НЕЩОДАВНО ПРИГНАНИЙ VAG З ІТАЛІЇ, Є ПЕВНІ НЮАН...\n      18\n      8.926518\n    \n  \n\n\n\n\n\n\n2.1.3 Класифікуємо ознаки на типи\n\nfeatures2drop = ['full_name', 'desc', 'price_log']\ntargets = ['price']\ncat_features = ['brand', 'model', 'location', 'region', 'fuel', 'gearbox', 'drive', 'accident', 'vin']\n\nfiltered_features = [i for i in train.columns if (i not in targets and i not in features2drop)]\nnum_features = [i for i in filtered_features if i not in cat_features]\n\nprint('cat_features :', len(cat_features), cat_features)\nprint('num_features :', len(num_features), num_features)\nprint('targets', targets)\n\ncat_features : 9 ['brand', 'model', 'location', 'region', 'fuel', 'gearbox', 'drive', 'accident', 'vin']\nnum_features : 4 ['make_year', 'mileage', 'disp', 'age']\ntargets ['price']\n\n\n\n\n2.1.4 Навчаємо Catboost та робимо прогноз на тестових даних\n\nX = train[filtered_features].drop(targets, axis=1, errors='ignore')\ny = train['price']\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, \n                                                    random_state=2023)\n\n\ncat_r = CatBoostRegressor(cat_features=cat_features, task_type=\"GPU\",\n                        random_seed=2023)\n\ncat_r.fit(X_train, y_train, \n          eval_set=(X_test, y_test),\n          verbose=150, plot=False)\n\nLearning rate set to 0.088743\n\n\n0:  learn: 20951.9704763    test: 19718.6792064 best: 19718.6792064 (0) total: 32.8ms   remaining: 32.8s\n\n\n150:    learn: 9379.7517897 test: 8840.9942779  best: 8840.9564688 (149)    total: 5.28s    remaining: 29.7s\n\n\n300:    learn: 8094.2846362 test: 8255.1288424  best: 8254.6181574 (298)    total: 10.5s    remaining: 24.4s\n\n\n450:    learn: 7825.4912976 test: 8161.5918830  best: 8161.2547963 (392)    total: 15.5s    remaining: 18.9s\n\n\n600:    learn: 7305.3577011 test: 8061.1877795  best: 8049.1591901 (582)    total: 20.5s    remaining: 13.6s\n\n\n750:    learn: 7251.1309179 test: 8066.5336929  best: 8049.1591901 (582)    total: 24.5s    remaining: 8.13s\n\n\n900:    learn: 7188.4427166 test: 8056.7350172  best: 8040.1918154 (805)    total: 29.2s    remaining: 3.21s\n\n\n999:    learn: 6914.3538777 test: 8096.1365896  best: 8040.1918154 (805)    total: 32.5s    remaining: 0us\nbestTest = 8040.191815\nbestIteration = 805\nShrink model to first 806 iterations.\n\n\n<catboost.core.CatBoostRegressor at 0x2b9e5ed6530>\n\n\n\n\n2.1.5 Оцінка моделі\n\ny_pred = cat_r.predict(X_test)\nmae_catboost = mean_absolute_error(y_test, y_pred)\nprint(f'\\n MAE: {mae_catboost}')\n\n\n MAE: 3288.424526868579\n\n\n\n\n2.1.6 Оцінка важливості ознак\n\ncat_r.get_feature_importance(prettified=True, type='FeatureImportance')\n\n\n\n\n\n  \n    \n      \n      Feature Id\n      Importances\n    \n  \n  \n    \n      0\n      disp\n      30.152347\n    \n    \n      1\n      make_year\n      17.569090\n    \n    \n      2\n      brand\n      16.727893\n    \n    \n      3\n      mileage\n      11.085807\n    \n    \n      4\n      age\n      8.277802\n    \n    \n      5\n      drive\n      5.564494\n    \n    \n      6\n      accident\n      4.674996\n    \n    \n      7\n      gearbox\n      1.831595\n    \n    \n      8\n      fuel\n      1.802577\n    \n    \n      9\n      region\n      0.964083\n    \n    \n      10\n      location\n      0.914469\n    \n    \n      11\n      model\n      0.412602\n    \n    \n      12\n      vin\n      0.022246"
  },
  {
    "objectID": "model.html#xgboost",
    "href": "model.html#xgboost",
    "title": "2  Прогнозування ціни автомобіля",
    "section": "2.2 XGBoost",
    "text": "2.2 XGBoost\n\n2.2.1 Імпорт бібліотек\n\nimport xgboost as xg\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.preprocessing import OneHotEncoder\n\n\n\n2.2.2 Підготовка даних\n\ntrain[train.select_dtypes(['object']).columns] = train.select_dtypes(['object']).apply(lambda x: x.astype('category'))\n\ntest[test.select_dtypes(['object']).columns] = test.select_dtypes(['object']).apply(lambda x: x.astype('category'))\n\nX = train[filtered_features].drop(targets, axis=1, errors='ignore')\ny = train['price']\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=2023)\n\n\n\n2.2.3 Навчання моделі\n\nxgb_r = xg.XGBRegressor(tree_method=\"gpu_hist\", enable_categorical=True, seed=2023)\n\nxgb_r.fit(X_train, y_train)\n\nXGBRegressor(base_score=None, booster=None, callbacks=None,\n             colsample_bylevel=None, colsample_bynode=None,\n             colsample_bytree=None, early_stopping_rounds=None,\n             enable_categorical=True, eval_metric=None, feature_types=None,\n             gamma=None, gpu_id=None, grow_policy=None, importance_type=None,\n             interaction_constraints=None, learning_rate=None, max_bin=None,\n             max_cat_threshold=None, max_cat_to_onehot=None,\n             max_delta_step=None, max_depth=None, max_leaves=None,\n             min_child_weight=None, missing=nan, monotone_constraints=None,\n             n_estimators=100, n_jobs=None, num_parallel_tree=None,\n             predictor=None, random_state=None, ...)In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.XGBRegressorXGBRegressor(base_score=None, booster=None, callbacks=None,\n             colsample_bylevel=None, colsample_bynode=None,\n             colsample_bytree=None, early_stopping_rounds=None,\n             enable_categorical=True, eval_metric=None, feature_types=None,\n             gamma=None, gpu_id=None, grow_policy=None, importance_type=None,\n             interaction_constraints=None, learning_rate=None, max_bin=None,\n             max_cat_threshold=None, max_cat_to_onehot=None,\n             max_delta_step=None, max_depth=None, max_leaves=None,\n             min_child_weight=None, missing=nan, monotone_constraints=None,\n             n_estimators=100, n_jobs=None, num_parallel_tree=None,\n             predictor=None, random_state=None, ...)\n\n\n\n\n2.2.4 Оцінка моделі\n\ny_pred = xgb_r.predict(X_test)\nmae_xgboost = mean_absolute_error(y_test, y_pred)\nprint(f'\\n MAE: {mae_xgboost}')\n\n\n MAE: 3125.0456724924156\n\n\n\n\n2.2.5 Оцінка важливості ознак\n\nxg.plot_importance(xgb_r, importance_type=\"gain\")\nplt.show()"
  },
  {
    "objectID": "model.html#lightgbm",
    "href": "model.html#lightgbm",
    "title": "2  Прогнозування ціни автомобіля",
    "section": "2.3 LightGBM",
    "text": "2.3 LightGBM\n\n2.3.1 Імпорт бібліотек\n\nimport lightgbm as lgb\n\n\n\n2.3.2 Параметри моделі\n\nparams = {\n    'task': 'train', \n    'boosting': 'gbdt',\n    'objective': 'regression',\n    'metric': 'mae',\n    'seed': 2023\n}\n\n\n\n2.3.3 Підготовка даних\n\nlgb_train = lgb.Dataset(X_train, y_train)\nlgb_eval = lgb.Dataset(X_test, y_test, reference=lgb_train)\n\n\n\n2.3.4 Навчання моделі\n\nlgb_r = lgb.train(params,\n                 train_set=lgb_train,\n                 valid_sets=lgb_eval)\n\n\n\n2.3.5 Оцінка моделі\n\ny_pred = lgb_r.predict(X_test)\n\nmae_lbg = mean_absolute_error(y_test, y_pred)\nprint(\"MAE: %.2f\" % mae_lbg)\n\nMAE: 2924.99\n\n\n\n\n2.3.6 Важливість ознак\n\ndf_feature_importance = (\n    pd.DataFrame({\n        'feature': lgb_r.feature_name(),\n        'importance': lgb_r.feature_importance(),\n    })\n    .sort_values('importance', ascending=False)\n)\n\ndf_feature_importance\n\n\n\n\n\n  \n    \n      \n      feature\n      importance\n    \n  \n  \n    \n      7\n      disp\n      823\n    \n    \n      3\n      mileage\n      657\n    \n    \n      2\n      make_year\n      503\n    \n    \n      0\n      brand\n      393\n    \n    \n      1\n      model\n      239\n    \n    \n      9\n      drive\n      117\n    \n    \n      4\n      location\n      86\n    \n    \n      6\n      fuel\n      69\n    \n    \n      10\n      accident\n      68\n    \n    \n      5\n      region\n      22\n    \n    \n      8\n      gearbox\n      22\n    \n    \n      12\n      age\n      1\n    \n    \n      11\n      vin\n      0"
  },
  {
    "objectID": "model.html#висновки-та-про-позиції",
    "href": "model.html#висновки-та-про-позиції",
    "title": "2  Прогнозування ціни автомобіля",
    "section": "2.4 Висновки та про позиції",
    "text": "2.4 Висновки та про позиції\n\n2.4.1 Загальний підсумок ефективності моделей:\n\nmae_score = {'Модель': ['CatBoost', 'XGBoost', 'LightGBM'],\n            'MAE': [mae_catboost, mae_xgboost, mae_lbg]}\n\nmae_score_df = pd.DataFrame(data=mae_score)\nmae_score_df\n\n\n\n\n\n  \n    \n      \n      Модель\n      MAE\n    \n  \n  \n    \n      0\n      CatBoost\n      3288.424527\n    \n    \n      1\n      XGBoost\n      3125.045672\n    \n    \n      2\n      LightGBM\n      2924.985495\n    \n  \n\n\n\n\n\n\nЗагалом, всі моделі показують приблизно однаковий результат. Але найкращий результат показав LightGBM з показником 2924.99. Ймовірно це пов’язано з тим, що модель змогла краще оцінити важливість ознак, особливо model та brand.\n\n\n\n\n2.4.2 Пропозиції щодо подальшого дослідження та підвищення ефективності:\n\nвикористання даних з data.gov.ua;\nпарсинг зовнішніх даних та формування додаткових ознак, наприклад кольору, типу кузова та інших;\nавтоматична генерація та фільтрація ознак;\nвикористання більшої кількості моделей та їх блендінг;\nобробка опису оголошення методами NLP та використання його як додаткової ознаки;\nоптимізація пам’яті та прискорення обчислень"
  }
]