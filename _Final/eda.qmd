# Розвідувальний аналіз даних

## Імпорт бібліотек

```{python}
import pandas as pd
import numpy as np
import datetime
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px
from plotnine import *

import warnings
warnings.filterwarnings("ignore")
```

## Вхідні дані

У роботі використаний набір даних, отриманий за допомогою парсингу маркетплейсу Autoria за 10 вересня 2022 року: <https://auto.ria.com/uk>. Даний сайт працює як віртуальний торговельний майданчик із загальнодоступними оголошеннями про продаж автомобілів разом з інформацією про їх характеристики.

Опис змінних:

1. `Brand` – марка автомобіля;
1. `Model` – модель автомобіля;
1. `Year` – рік випуску автомобіля;
1. `Price` – ціна автомобіля (дол.);
1. `Mileage` – пробіг автомобіля (тис. км.);
1. `Location` – фізичне місце розташування автомобіля (включає в себе міста, села, поселення міського типу);
1. `Region` - регіон розташування автомобіля;
1. `Fuel type` – тип палива автомобіля;
1. `Engine volume` – об‘єм двигуна автомобіля (л.);
1. `Gearbox type` – тип коробки передач автомобіля;
1. `Wheel drive` – тип приводу автомобіля;
1. `Accident` – ДТП (потрапляв автомобіль в ДТП чи ні);
1. `VIN-code` – VIN-code (перевірений VIN-code чи ні);
1. `Desc` – опис оголошення.

```{python}
#| column: screen-inset-shaded
#| tbl-cap: 'Вхідні дані'
df = pd.read_excel('00_data/ukr_cars.xlsx')
df.head()
```

```{python}
df.info()
```

```{python}
df.describe()
```

```{python}
df.isna().sum()
```

```{python}
#| column: screen-inset-shaded
df['Age'] = datetime.date.today().year - df['Year']
df.head()
```

```{python}
df["Brand"].nunique()
```


```{python}
df['Brand'].value_counts().head()
```

```{python}
#| fig-cap: 'Марки автомобілів, які зустрічаються найчастіше'
# ax = sns.countplot(
#     y='Brand',
#     data=df,
#     order=df.Brand.value_counts().iloc[:25].index
#     )
# ax.set_xlabel("Кількість")
# ax.set_ylabel("")
# plt.show()

df_counts = df["Brand"].value_counts().iloc[:25].reset_index()
df_counts.columns = ["Brand", "count"]

fig = px.bar(df_counts, y="Brand", x="count", orientation="h")
fig.update_layout(yaxis={'categoryorder':'total ascending'})

fig.update_layout(xaxis_title="Кількість", yaxis_title="", plot_bgcolor='rgba(0,0,0,0)')
fig.show()
```

```{python}
#| fig-cap: 'Марки автомобілів, які зустрічаються найрідше'
# ax = sns.countplot(
#     y='Brand',
#     data=df,
#     order=df.Brand.value_counts().iloc[:-50:-1].index
#     )
# ax.set_xlabel("Кількість")
# ax.set_ylabel("")
# plt.show()

df_counts = df["Brand"].value_counts().iloc[:-50:-1].reset_index()
df_counts.columns = ["Brand", "count"]

fig = px.bar(df_counts, y="Brand", x="count", orientation="h")

fig.update_layout(xaxis_title="Кількість", yaxis_title="", plot_bgcolor='rgba(0,0,0,0)')
fig.show()
```

```{python}
def get_top_models(df, brand, top_n=5):
    # Відфільтровуємо за брендом
    df_brand = df[df["Brand"] == brand]
    
    # Згрупуємо за моделлю та порахуємо кількість
    model_counts = df_brand.groupby(by=["Model"]).size().reset_index(name="Count")

    # Відсортуємо та обмежимо результат до top_n найпопулярніших моделей
    top_models = model_counts.nlargest(top_n, "Count")
    
    return top_models
```

```{python}
top5_vw_models = get_top_models(df, "Volkswagen")
top5_bmw_models = get_top_models(df, "BMW")
top5_mers_models = get_top_models(df, "Mercedes-Benz")
```


```{python}
#| layout-ncol: 3
#| fig-cap: 
#|   - "Volkswagen"
#|   - "BMW"
#|   - "Mercedes-Benz"
#| column: page
volk = sns.catplot(y='Model', x='Count', data=top5_vw_models, kind='bar',
palette='PRGn', alpha=0.5, legend=False)
volk.set(xlabel='Кількість', ylabel='Модель автомобіля', title='Volkswagen')
volk.fig.suptitle("")

bmw = sns.catplot(y='Model', x='Count', data=top5_bmw_models, kind='bar',
palette='Spectral', alpha=0.5, legend=False)
bmw.set(xlabel='Кількість', ylabel='Модель автомобіля', title='BMW')
bmw.fig.suptitle("")

mb = sns.catplot(y='Model', x='Count', data=top5_mers_models, kind='bar',
palette='BrBG', alpha=0.5, legend=False)
mb.set(xlabel='Кількість', ylabel='Модель автомобіля', title='Mercedes-Benz')
mb.fig.suptitle("")
plt.show()
```


```{python}
uaRegionsGrid = pd.DataFrame({
'row': [1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5],
'col': [2, 5, 6, 7, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 2, 5, 6, 7, 4, 6, 5],
'code': list(range(1, 28)),
'name': ["Волинська область", "Київ", "Чернігівська область", "Сумська область", "Львівська область", "Тернопільська область", "Рівненська область", "Житомирська область", "Київська область", "Полтавська область", "Харківська область", "Луганська область", "Закарпатська область", "Івано-Франківська область", "Хмельницька область", "Вінницька область", "Черкаська область", "Кіровоградська область", "Дніпропетровська область", "Донецька область", "Чернівецька область", "Миколаївська область", "Херсонська область", "Запорізька область", "Одеська область", "АР Крим", "м. Севастополь"]
})
uaRegionsGrid
```


```{python}
data_region_quantity = df.groupby('Region').size().reset_index(name='Count')
data_region_quantity['Percent'] = (data_region_quantity['Count'] / data_region_quantity['Count'].sum()) * 100
data_region_quantity
```


```{python}
uaCarsQuantity = uaRegionsGrid.merge(data_region_quantity, left_on='name', right_on='Region', how='left')

uaCarsQuantity
```

```{python}
uaCarsQuantity['Region'] = uaCarsQuantity['Region'].str.replace(' область', '')
```

```{python}
#| fig-cap: "Відсоток автомобілів в регіонах України"
data = np.asarray(uaCarsQuantity.pivot("row", "col", "Percent"))
text = np.asarray(uaCarsQuantity.pivot("row", "col", "Region"))
labels = (np.asarray(["{0}\n{1:.2f}".format(text,data) for text, data in zip(text.flatten(), data.flatten())])).reshape(5,8)

sns.set_theme(style='white', font_scale=0.6)
f, ax = plt.subplots(figsize=(9, 6))
sns.heatmap(data,
    annot=labels,
    linewidths=.5,
    fmt='',
    ax=ax,
    yticklabels=False,
    xticklabels=False,
    cbar=False)
plt.show()
```